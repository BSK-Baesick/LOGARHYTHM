
<< GAME DESIGN DOCUMENT (GDD) >>

I.) GAME DETAILS

CODENAME: 
PROJECT - Alfa

GAME NAME: 
"LOGARHYTHM"

VERSION:
2019.0

DATE STARTED:
June 27, 2019

PROGRAMMING LANGUAGE USED:
Unity C#

COMPANY NAME:
BaeSICK Entertainment (An Indie Game Dev Team---probably consist of my classmates and friends who's starting to
take their beginner's step at Game Development)

DEVELOPED BY:
Matthew Johannes C. Balubar

GAME GENRE: 
Rhythmic Arcade

TARGET PLATFORM: 
1.) PRIMARY TARGET PLATFORM = Android
2.) SECONDARY TARGET PLATFORM = iOS

DESCRIPTION:

"THE REVOLUTION OF MUSIC BEGINS HEREEE!!!"

Dive into a thrilling world of ACTION as the BEATz set up to pull off the most iconic songs of all times using their attributes to
connect people through music and emotions. Follow the storyline of a man and a woman who falls in love with each other through 
music.

TAP, SWIPE or even SMASH the BEATz according to the gesture given on the screen to earn EMOpoints. Advance through the other
stage by finishing challenges, dethrone players along the DUEL MODE and be the next SUPRASTAR!

Do you have the guts to become the next SUPRASTAR?


II.) GAME DESIGN

PLAYER EXPERIENCE:
Frantic

THEME:
Neon

STORY TYPE:
LINEAR

STORYLINE:
THIS IS A STORY OF A TEENAGE BOY AND GIRL WHO HAS A "ONE-SIDED" LOVE ON EACH OTHER AND ARE SEPERATED BY DISTANCE.
THE BOY AND GIRL LOVES MUSIC. EVERYTIME THEY LISTENS TO MUSIC, THEY FEEL CONNECTED WITH EACH OTHER.

AESTHETICS:
2D. EVERY TILE HAS A UNIQUE INTERACTION AND GESTURES TO SUIT THE SCENERIO AND SONG.

III.) CORE GAME LOOP

INSPIRATION:
Music Hero meets Piano Tiles and BEAT

GAME LOOP:
1.) SPAWN "BEATz" (A gameObject) RANDOMLY OR IN FIXED POSITION
2.) PLAYER INTERACTS THROUGH SCREEN GESTURES
3.) THE PLAYER GETS "EmoPOINTS" IF THE PLAYER SUCCESSFULLY EXECUTES THE GIVEN SCREEN GESTURES
4.) IF THE WIN CONDITION IS MET...SUCCESS! PROCEED TO THE NEXT LEVEL!
5.) IF THE WIN CONDITION IS NOT MET...DEAD END! RETRY THE LEVEL!

IV.) FEATURE TRIAGE

DESCRIPTION: A short set of to-do "secondray features" after implementing the main features. This is a list of what comes first and
what to prioritize.

1.) SPAWNS RANDOM INCENTIVES (EX: Score Multiplier) IF THE CONDITION (EXAMPLE CHALLENGE: YOU MUST
REACH THE TARGET SCORE TO PROCEED TO THE NEXT LEVEL) IS NOT LIKELY TO MET WHITHN A GIVEN TIME/SCENARIO/CHALLENGE

ENGINEERING EFFORT COST: 10
DESIGN VALUE:10
PRIORITY: CRITICAL

2.) PLAY THE DEATH ANIMATION OR FAIL STATE ON LEVEL SCREENS MORE HUMOROUS SO THAT FAILURE IS NOT THAT "HARSH"
WHEN THE PLAYER SEES IT.

ENGINEERING EFFORT COST: 5
DESIGN VALUE: 9
PRIORITY: NON-CRITICAL

3.) PEEPMIUM SHOP (In-app Purchases)

ENGINEERING EFFORT COST: 10
DESIGN VALUE: 10
PRIORITY: OUT OF SCOPE

4.) ADS System

ENGINEERING EFFORT COST: 10
DESIGN VALUE: 3
PRIORITY: NON-CRITICAL

5.) Rating System

ENGINEERING EFFORT COST: 2
DESIGN VALUE: 5
PRIORITY: NON-CRITICAL

6.) Main Menu

ENGINEERING EFFORT COST: 7
DESIGN VALUE: 10
PRIORITY: CRITICAL

7.) DUEL! (Player VS. Player - Multiplayer Match)

ENGINEERING EFFORT COST: 11
DESIGN COST: 8
PRIORITY: OUT OF SCOPE

8.) PAUSE GAME

ENGINEERING EFFORT COST: 1
DESIGN VALUE: 8
PRIORITY: NON-CRITICAL

9.) CUTSCENES

ENGINEERING COST: 5
DESIGN VALUE: 11
PRIORITY: CRITICAL

10.) Donation System

ENGINEERING COST: 11
DESIGN VALUE: 11
PRIORITY: CRITICAL

V.) TECH

GAME ENGINE:
Unity

ADDITIONAL SOFTWARE TO BE USED TO DEVELOP THE GAME:
-Adobe Photoshop 2019, Adobe Illustrator 2019, Aseprite
REASON: Use for Graphics Art 

-Apowersoft GIF, Spriter
REASON: Use for Animations

-Audacity
REASON: Use for Sounds Effects, Audio & Backround Music

-Jetbrains Rider 2019
REASON: Use for Version Control

-Visual Studio 2019
REASON: Use for scripting and coding

ASSETS THAT WILL BE USED IN THE PROJECT:
1.) Gameplay Implementation
-Easy Touch 5
REASON: For implementing multiple gestures

-Time Manager
REASON: For controlling time

-Pooly
REASON: For object pooling

2.) Scripting Implementation
-Easy Threading
REASON: Alternative to coroutines; #NoToGarbage

3.) Art Implementation
-Camera Play
REASON: The name sums it up

-Post Processing Stack
REASON: To make the BEATz bloom and glow

4.) Game Security
-Anti Cheat Toolkit
REASON: Protects the game variables from cheat tools like Lucky Patcher and rooted phones who modifies the game

DEVELOPER/S

1.) Matthew Johannes C. Balubar (Indie Game Developer/ Student)

DESCRIPTION:

      I am an avid fan of video games back when I was seven years old. My first game I've played was Paradise Island. I've also
	  learned how to play Warcraft and DoTA I at my early childhood. I've spend my whole time playing flash games on Y8 and
	  Friv like Gun Mayhem and Swords and Sandals. Everytime I arrived at home, I always play my favorite game, Adventure Quest
	  instead of doing my assignments---the reason why I'm always scolded by my parents.

	  My interest in game development started when I was in Grade 7. I started creating games at sploder.com and invest my time
	  in learning it instead of learning how to play Twisted Fate at League of Legends. I gave up the idea of game development as
	  things get more complicated that time.

	  And then here we go again! My game dev juices has once again pops up into my head when I was in Grade 9. I started
	  studying the whereabouts of game development by reading some best-selling and award-winning books related to game
	  dev like "The Art of Game Design: A Book of Lenses" by Jesse Schell and "Blood, Sweat and Pixels" by Jason Schrieier instead
	  of reading fictions at Wattpad. These books motivated me to push beyond my constraints. I relate games on how I live so
	  I can beat game compulsion, and it made my life more meaningful---and fun, too.

	  When I was Grade 11, I started experimenting on what game engine will suit me the best. I almost try every game engine
	  available at the market starting from "no prior knowledge to programming language" game engines like Construct 3, Gamemaker,
	  Clickteam Fusion 2.5 and the like. I also tried Renpy, RPG Maker and Unreal but they seems to be complicated and hard to learn.
	  Then I found Brackeys on YouTube. I watched one of his video regarding on how to start with your first game. From there, Unity
	  comes to the rescue!

	  I bought a course at Udemy and uses my 30-days trial at Pluralsight to learn Unity as fast as I can. I learnt the basics and then
	  I crafted my skills specifically at programming in C#, perfecting how to make a clean, efficient and garbage-free code. My forte
	  was programming gameplay mechanics. Up until now, I'm still resharpening my skills in programming by making games so that
	  I can master every single patterns and methods use by the proffesionals and triple A studios in coding scripts especially with
	  enums, dictionaries, delegates and singleton patterns.